/* pk-diff.pk - Home of the `sdiff' and `bdiff' commands.  */

/* Copyright (C) 2022 Jose E. Marchesi */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var pk_diff_group_by = 1#B;
var pk_sdiff_print_values = 1;

pk_help_add_topic
:entry Poke_HelpEntry {
          category = "commands",
          topic = "sdiff",
          summary = "structured binary diff of two mapped values",
          description= format ("
Synopsis:

  sdiff :a VAL :b VAL [:values BOOL] [:group_by OFFSET]

Arguments:

  :a (any)
         First mapped value whose bytes are compared.

  :b (any)
         Second mapped value whose bytes are compared.

  :values (bool)
         Whether to include interpreted values in the output.
         Defaults to %v.

  :group_by (int)
         How are bytes grouped together in the output.  Defaults to
         `pk_diff_group_by', initially %v.

Note that for the differences to make sense, both values A and B
should be of the same type.

If any of the specified values are not mapped then `sdiff' raises an
E_map exception.

See `.doc sdiff' for more information.",
           pk_sdiff_print_values,
           pk_diff_group_by),
          };

var PK_THUNK_ADD = 1;
var PK_THUNK_REM = 2;

type Pk_Diff_Thunk =
  struct
  {
    type Pk_Diff_Thunk_Line =
      struct
      {
        int kind : kind in [PK_THUNK_ADD, PK_THUNK_REM];
        string data;
        string name;
        string value;
      };

    int emit_values_p;
    offset<int,B> group_by = 1#B;

    var A = 0, B = 1;
    offset<uint<64>,B>[2] offset;
    offset<uint<64>,B>[2] size;
    Pk_Diff_Thunk_Line[] lines;

    method reset = (offset<uint<64>,B> aoff = 0#B,
                    offset<uint<64>,B> asiz = 0#B,
                    offset<uint<64>,B> boff = 0#B,
                    offset<uint<64>,B> bsiz = 0#B) void:
    {
      offset[A] = aoff;
      offset[B] = boff;
      size[A] = asiz;
      size[B] = bsiz;
      lines = Pk_Diff_Thunk_Line[]();
    }

    method append_line = (int kind,
                          byte[] bytes,
                          string name = "",
                          string value = "") void:
    {
      fun format_bytes = (byte[] bytes) string:
      {
        var x = 1#B;
        var s = "";

        for (b in bytes)
        {
          s += format ("%u8x", b);
          if (x++ % group_by == 0#B)
            s += " ";
        }
        return s;
      }

      lines += [Pk_Diff_Thunk_Line { kind = kind,
                                     data = format_bytes (bytes),
                                     name = name,
                                     value = value }];
    }

    method print_thunk = void:
    {
      if (lines'length == 0)
        return;

      var a_region
        = size[A] > 0#B ? format ("0x%u8x+%u64d", offset[A]/#B, size[A]/#B) : "";
      var b_region
        = size[B] > 0#B ? format ("0x%u8x+%u64d", offset[B]/#B, size[B]/#B) : "";

      term_begin_class ("diff-thunk-header");
      printf ("@@ %s,%s @@\n", a_region, b_region);
      term_end_class ("diff-thunk-header");
      var table = Pk_Table { num_columns = emit_values_p ? 3 : 2 };
      for (line in lines)
      {
        table.row (line.kind == PK_THUNK_ADD ? "diff-plus" : "diff-minus");
        table.column ((line.kind == PK_THUNK_ADD ? "+" : "-") + line.data);
        table.column (line.name);
        if (emit_values_p)
          table.column (line.value);
      }
      table.print_table;
    }

    method change = (offset<uint<64>,B> aoff, offset<uint<64>,B> asiz,
                     offset<uint<64>,B> boff, offset<uint<64>,B> bsiz,
                     byte[] abytes, byte[] bbytes,
                     string aname = "", string bname = "",
                     string avalue = "", string bvalue = "") void:
    {
      if (aoff == offset[A] + size[A]
          && boff == offset[B] + size[B])
      {
        size[A] += asiz;
        size[B] += bsiz;
      }
      else
      {
        print_thunk;
        reset (aoff, asiz, boff, bsiz);
      }

      append_line (PK_THUNK_REM, abytes, aname, avalue);
      append_line (PK_THUNK_ADD, bbytes, bname, bvalue);
    }

    method addrem = (int what,
                     offset<uint<64>,B> off, offset<uint<64>,B> siz,
                     byte[] bytes, string name = "", string value = "") void:
    {
      var to = what == PK_THUNK_ADD ? B : A;

      if (off == offset[to] + size[to])
        size[to] += siz;
      else
      {
        print_thunk;
        if (what == PK_THUNK_ADD)
          reset :boff off :bsiz siz;
        else
          reset :aoff off :asiz siz;
      }

      append_line (what, bytes, name, value);
    }
  };

fun sdiff = (any a, any b,
             string prefix_a = "a",
             string prefix_b = "b",
             int values = pk_sdiff_print_values,
             offset<uint<64>,B> group_by = pk_diff_group_by,
             Pk_Diff_Thunk thunk = Pk_Diff_Thunk { emit_values_p = values,
                                                   group_by = group_by })
            void:
{
  fun format_ename = (string ename) string:
  {
    if (ename'length > 0 && ename[0] == '[')
      return ename;
    else
      return "." + ename;
  }

  fun format_value = (any val) string:
  {
    /* Note we don't try to be exhaustive here.  */
    if (val isa string)
      return format ("%v", val as string);
    else if (val isa int<64>)
      return format ("%v", val as int<64>);
    else if (val isa uint<64>)
      return format ("%v", val as uint<64>);
    else if (val isa int<32>)
      return format ("%v", val as int<32>);
    else if (val isa uint<32>)
      return format ("%v", val as uint<32>);
    else if (val isa int<16>)
      return format ("%v", val as int<16>);
    else if (val isa uint<16>)
      return format ("%v", val as uint<16>);
    else if (val isa offset<int<64>,B>)
      return format ("%v", val as offset<int<64>,B>);
    else if (val isa offset<uint<64>,B>)
      return format ("%v", val as offset<uint<64>,B>);
    else if (val isa offset<int<32>,B>)
      return format ("%v", val as offset<int<32>,B>);
    else if (val isa offset<uint<32>,B>)
      return format ("%v", val as offset<uint<32>,B>);
    else if (val isa offset<int<16>,B>)
      return format ("%v", val as offset<int<16>,B>);
    else if (val isa offset<uint<16>,B>)
      return format ("%v", val as offset<uint<16>,B>);
    else
      return "";
  }

  fun get_elem_bytes = (any v, uint<64> idx) byte[]:
  {
    try return byte[v'esize (idx)] @ v'ios : v'eoffset (idx);
    catch if E_map_bounds
    {
      raise Exception { code = EC_inval,
                        name = "invalid argument",
                        msg = "size of field " + v'ename (idx)
                              + " is not a multiple of bytes" };
    }
  }

  fun elem_simple_p = (any elem, uint<64> idx) int:
  {
    try { elem'elem(idx)'elem (0); return 0; }
    catch (Exception e)
    {
      if (e.code == EC_out_of_bounds)
        return 0;
      if (e.code != EC_inval)
       raise e;
    }
    return 1;
  }

  fun sdiff_addrem = (int what, Pk_Diff_Thunk thunk,
                      any val, string prefix, uint<64> idx) void:
  {
    for (; idx < val'length; ++idx)
    {
      if (val'elem (idx) ?! E_inval)
      {
        /* Note that recursing into the element may result in E_inval
           in case a non-byte element is found.  In that case, try to
           emit the thunk anyway.  */
        if (elem_simple_p (val, idx)
            || ! { sdiff_addrem (what, thunk, val'elem (idx),
                                 prefix + format_ename (val'ename (idx)),
                                 0); } ?! E_inval)
          thunk.addrem :what what :off val'eoffset (idx) :siz val'esize (idx)
                       :bytes get_elem_bytes (val, idx)
                       :name prefix + format_ename (val'ename (idx))
                       :value format_value (val'elem (idx));
      }
    }
  }

  /* First of all, make sure both values are mapped.  */
  if (!a'mapped || !b'mapped)
    raise E_map;

  /* Proceed element by element.  */
  var idx = 0UL;
  for (; idx < a'length; ++idx)
  {
    var a_is_present = a'elem (idx) ?! E_inval;

    if (idx >= b'length)
    {
      sdiff_addrem (PK_THUNK_REM, thunk, a, prefix_a, idx);
      break;
    }
    else
    {
      var b_is_present = b'elem (idx) ?! E_inval;

      if (a_is_present && b_is_present)
      {
        var a_full_name = prefix_a + format_ename (a'ename (idx));
        var b_full_name = prefix_b + format_ename (b'ename (idx));

        /* If the element is simple, add a change to the current
           thunk; otherwise recurse to handle its elements.  Note that
           recursing into the element may result in E_inval in case a
           non-byte element is found.  In that case, try to emit the
           thunk anyway.  */
        if (elem_simple_p (a, idx)
            || ! { sdiff (a'elem (idx), b'elem (idx),
                          a_full_name, b_full_name,
                          values, group_by, thunk); } ?! E_inval)
        {
          var a_bytes = get_elem_bytes (a, idx);
          var b_bytes = get_elem_bytes (b, idx);

          if (a_bytes != b_bytes)
            thunk.change :aoff a'eoffset (idx) :asiz a'esize (idx)
                         :boff b'eoffset (idx) :bsiz b'esize (idx)
                         :abytes a_bytes :bbytes b_bytes
                         :aname a_full_name :bname b_full_name
                         :avalue format_value (a'elem (idx))
                         :bvalue format_value (b'elem (idx));
        }
      }
      else if (b_is_present)
        sdiff_addrem (PK_THUNK_ADD, thunk, b'elem (idx), prefix_b, 0);
      else if (a_is_present)
        sdiff_addrem (PK_THUNK_REM, thunk, a'elem (idx), prefix_a, 0);
    }
  }

  /* Now generate ADD thunks for extra elements in `b'.  */
  if (idx < b'length)
    sdiff_addrem (PK_THUNK_ADD, thunk, b, prefix_b, idx);

  /* There may be a thunk still to be emitted.  */
  thunk.print_thunk;
  thunk.reset;
}

/* pk-dump.pk - `dump' command.  */

/* Copyright (C) 2019, 2020, 2021 Jose E. Marchesi */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

pk_help_add_topic
  :entry Poke_HelpEntry {
          category = "commands",
          topic = "dump",
          summary = "display the contents of a range in the current IO space.",
          description="
Synopsis:

  dump [:from OFFSET] [:size OFFSET] [:ruler BOOL] [:ascii BOOL] \\
       [:group_by INT] [:cluster_by INT]

Arguments:

  :from (offset)
         Beginning of the range to dump.  Defaults to
         `pk_dump_offset', initially 0#B.

  :size (offset)
         How much data to dump.  Defaults to `pk_dump_size', initially
         128#B.

  :ruler (int)
         Boolean indicating whether to display a ruler.  Defaults to
         `pk_dump_ruler', initially 1.

  :ascii (int)
         Boolean indicating whether to display an ASCII dump at the
         right of the bytes dump.  Defaults to `pk_dump_ascii',
         initially 1.

  :group_by (int)
         How are bytes grouped together in the output.  Defaults to
         `pk_dump_group_by', initially 2#B.

  :cluster_by (int)
         Display additional space after the specified number of groups
         have been displayed.  Defaults to `pk_dump_cluster_by',
         initially 8.

If there is not a current IO space available `dump' raises an E_no_ios
exception.

Note that `dump' updates the `pk_dump_offset' global variable to
reflect the last used offset.

See `.doc dump' for more information."
          };

/* The operation of `dump' can be configured by the user by
   customizing the following variables.  */

var pk_dump_size = 128#B;
var pk_dump_group_by = 2#B;
var pk_dump_cluster_by = 8;
var pk_dump_ruler = 1;
var pk_dump_ascii = 1;
var pk_dump_nonprintable_char = '.';

/* `pk_dump_offset' keeps the last base offset used by `dump'.  It is
   the offset to be used in case the command is invoked with no :from
   argument.  */

var pk_dump_offset = 0#B;

/* And the command itself.  */

fun dump = (int<32> ios = get_ios,
            off64 from = pk_dump_offset,
            off64 size = pk_dump_size,
            off64 group_by = pk_dump_group_by,
            int cluster_by = pk_dump_cluster_by,
            int ruler = pk_dump_ruler,
            int ascii = pk_dump_ascii) void:
{
  fun print_ruler = void:
  {
    var o = 0#B;

    fun itoa = (uint<8> x) char:
    {
      if (x >= 0 && x <= 9) return x + '0';
      if (x >= 10 && x <= 15) return x + 'A' - 10;
    }

    printf "%<dump-ruler:76543210 %>";
    for (s in ["00", "11", "22", "33", "44", "55", "66",
	       "77", "88", "99", "aa", "bb", "cc", "dd",
	       "ee", "ff"])
      {
	if (o % group_by == 0#B)
	  printf "%<dump-ruler: %>";
	printf "%<dump-ruler:%s%>", s;
        o++;
	if (o < 16#B && (o % (cluster_by * group_by)) == 0#B)
	   printf (" ");
      }
    if (ascii)
      {
	var x = 0 as uint<8>;
	var s = "";
	while (x < 16)
	  {
	    s = s + itoa(x) as string;
            x++;
	    if (x < 16 && (x % ((cluster_by * group_by)/1#B)) == 0)
	      s = s + " ";
	  }
	printf "%<dump-ruler:  %s%>", s;
      }
    print "\n";
  }

  fun print_ascii = (off64 offset, off64 top, off64 step,
                     off64 group_by, int cluster_by) void:
  {
    print("  ");
    var o = 0#B;
    while (o < step && offset + o < top)
      {
	var v = byte @ ios : (offset + o);
	if (v < ' ' || v > '~')
	  printf "%<dump-ascii:%c%>", pk_dump_nonprintable_char;
	else
	  printf "%<dump-ascii:%c%>", v;
        o++;
	if (o < 16#B && (o % (cluster_by * group_by)) == 0#B)
	   printf (" ");
      }
  }

  fun print_hex = (char c, off64 o) void:
  {
    if (o % group_by == 0#B)
      print " ";
    printf ("%u8x", c);
  }

  fun print_data = (off64 offset, off64 top, off64 step,
                    off64 group_by , int cluster_by) void:
  {
    for (; offset < top; offset += step)
      {
	printf ("%<dump-address:%u32x:%>", offset / #B);

	var o = 0#B;
	try
	{
	  while (o < step && offset + o < top)
	    {
	      print_hex (byte @ ios : (offset + o), o);
              o++;
	      if (o < 16#B && (o % (cluster_by * group_by)) == 0#B)
		printf (" ");
	    }
	}
	catch if E_eof {}
	if (ascii)
	  {
	    while (o < step && ((offset + o) % 16#B) != 0#B)
	      {
		if (o % group_by == 0#B)
		  print " ";
		print ("  ");
                o++;
	      }
	    print_ascii (offset, top, step, group_by, cluster_by);
	  }
	print "\n";
      }
  }

  /* First of all, we require a readable IO space.  */
  if (! (ioflags (ios) & IOS_F_READ))
    /* XXX change to E_perm when it becomes available.  */
    raise E_no_ios;

  /* The `dump' command is byte-oriented.
     The base offset is truncated to bytes.
     The offset is rounded up to the next byte.  */
  var offset = from as offset<uint<64>,B>;
  var top = from + size + (size % 1#B);

  if (ruler)
    print_ruler;

  try print_data :offset offset :top top :step 16#B
                 :group_by group_by :cluster_by cluster_by;
  catch if E_eof { print "\n"; }

  pk_dump_offset = from;
}

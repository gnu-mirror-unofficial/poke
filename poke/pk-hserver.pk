/* pk-hserver.pk - Hyperlinks server Poke infrastructure.  */

/* Copyright (C) 2020 Jose E. Marchesi */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* Hostname where the hserver listens for connections.  This variable
   is initialized in pk-hserver.c */
var hserver_hostname = "";

/* Port where the hserver listens for connections.  */
var hserver_port = 0;

/* The hserver maintains a table with tokens.  Each hyperlink uses its
   own unique token, which is included in the payload and checked upon
   connection.  */

var hserver_max_tokens = 2014;

type HServer_Token =
  struct
  {
    int used_p;
    int id;
    string cmd;
  };

var hserver_tokens = HServer_Token[hserver_max_tokens]();

/* Get the command associated with a given token.  */
fun hserver_token_cmd = (int token) string:
{
  return hserver_tokens[token].cmd;
}

/* Determine whether a given token exists.  */
fun hserver_token_p = (int token) int:
{
  return hserver_tokens[token].used_p;
}

/* Allocate and get a random token.  */
fun hserver_get_token = int:
{
  var token = rand % hserver_max_tokens;

  while (hserver_tokens[token % hserver_max_tokens].used_p)
    token = (token + 1) % hserver_max_tokens;

  hserver_tokens[token].used_p = 1;
  hserver_tokens[token].id = token;

  return token;
}

/* Build a hserver hyperlink.  */

fun hserver_make_hyperlink = (char kind, string cmd) string:
{
  if (kind != 'i' && kind != 'e')
    raise E_inval;

  var token = hserver_get_token;
  hserver_tokens[token].cmd = cmd;

  return ("app://"
          + hserver_hostname
          + ":"
          + ltos (hserver_port)
          + "/"
          + ltos (token)
          + "/"
          + kind as string);
}

/* Print an hserver-served hyperlink.  */

fun hserver_print_hl = (char kind, string str, string href) void:
{
  var url = hserver_make_hyperlink (kind, href);

  term_begin_hyperlink (url, "");
  print str;
  term_end_hyperlink;
}

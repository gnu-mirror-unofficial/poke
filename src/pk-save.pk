/* pk-save.pk - `save' command.  */

/* Copyright (C) 2020 Jose E. Marchesi */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

pk_help_str = pk_help_str
  + "\nsave\t\tSave a range of an IO space to a file.";

defun save = (int ios = get_ios,
              string file = "",
              off64 from = 0#B,
              off64 size = 0#B,
              int append = 0,
              int verbose = 0) void:
{
 if (file == "" || size == 0#B)
   return;

 /* Determine the proper mode for the output IOS and open it.  */
 defvar flags = IOS_F_WRITE;

 if (append)
   flags = flags | IOS_F_READ;
 else
   flags = flags | IOS_F_TRUNCATE | IOS_F_CREATE;

 defvar file_ios = open (file, flags);

 /* Determine the output offset.  */
 defvar output_offset = 0#B;
 if (append)
   output_offset = iosize (file_ios);

 /* Determine the best step size to operate with.  */
 defvar step = 1#B;

 if (size % 64#B == 0#B)
   step = 64#B;
 else if (size % 32#B == 0#B)
   step = 32#B;
 else if (size % 16#B == 0#B)
   step = 16#B;

 /* Change the endianness to big endian, so we get the right ordering
    of the bytes when operating on steps > 1#B.  */
 defvar endian = get_endian;
 set_endian (ENDIAN_BIG);

 /* Write the bytes out. */
 defvar input_offset = from; 
 while (input_offset < from + size)
   {
     if (verbose)
       printf ("Writing %u64d bytes from %v to %v\n",
               step / #B,
               input_offset as offset<uint<64>,8>,
               output_offset as offset<uint<64>,8>);
     
     if (step == 64#B)
       uint<64> @ file_ios : output_offset = uint<64> @ ios : input_offset;
     else if (step == 32#B)
       uint<32> @ file_ios : output_offset = uint<32> @ ios : input_offset;
     else if (step == 16#B)
       uint<16> @ file_ios : output_offset = uint<16> @ ios : input_offset;
     else
       byte @ file_ios : output_offset = byte @ ios : input_offset;

     input_offset = input_offset + step;
     output_offset = output_offset + step;
   }

 /* Cleanup.  */
 set_endian (endian);
 close (file_ios);
}

/* dwarf-expr.pk - DWARF implementation for GNU poke. 
                   Expressions.  */

/* Copyright (C) 2020 Jose E. Marchesi.  */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* Opcodes.  */

defvar DW_OP_FIRST = 0x03;
defvar DW_OP_addr = 0x03;
defvar DW_OP_deref = 0x06;
defvar DW_OP_const1u = 0x08;
defvar DW_OP_const1s = 0x09;
defvar DW_OP_const2u = 0x0a;
defvar DW_OP_const2s = 0x0b;
defvar DW_OP_const4u = 0x0c;
defvar DW_OP_const4s = 0x0d;
defvar DW_OP_const8u = 0x0e;
defvar DW_OP_const8s = 0x0f;
defvar DW_OP_constu = 0x10;
defvar DW_OP_consts = 0x11;
defvar DW_OP_dup = 0x12;
defvar DW_OP_drop = 0x13;
defvar DW_OP_over = 0x14;
defvar DW_OP_pick = 0x15;
defvar DW_OP_swap = 0x16;
defvar DW_OP_rot = 0x17;
defvar DW_OP_xderef = 0x18;
defvar DW_OP_abs = 0x19;
defvar DW_OP_and = 0x1a;
defvar DW_OP_div = 0x1b;
defvar DW_OP_minus = 0x1c;
defvar DW_OP_mod = 0x1d;
defvar DW_OP_mul = 0x1e;
defvar DW_OP_neg = 0x1f;
defvar DW_OP_not = 0x20;
defvar DW_OP_or = 0x21;
defvar DW_OP_plus = 0x22;
defvar DW_OP_plus_uconst = 0x23;
defvar DW_OP_shl = 0x24;
defvar DW_OP_shr = 0x25;
defvar DW_OP_shra = 0x26;
defvar DW_OP_xor = 0x27;
defvar DW_OP_bra = 0x28;
defvar DW_OP_eq = 0x29;
defvar DW_OP_ge = 0x2a;
defvar DW_OP_gt = 0x2b;
defvar DW_OP_le = 0x2c;
defvar DW_OP_lt = 0x2d;
defvar DW_OP_ne = 0x2e;
defvar DW_OP_skip = 0x2f;
defvar DW_OP_lit0 = 0x30;
defvar DW_OP_lit1 = 0x31;
defvar DW_OP_lit2 = 0x32;
defvar DW_OP_lit3 = 0x33;
defvar DW_OP_lit4 = 0x34;
defvar DW_OP_lit5 = 0x35;
defvar DW_OP_lit6 = 0x36;
defvar DW_OP_lit7 = 0x37;
defvar DW_OP_lit8 = 0x38;
defvar DW_OP_lit9 = 0x39;
defvar DW_OP_lit10 = 0x3a;
defvar DW_OP_lit11 = 0x3b;
defvar DW_OP_lit12 = 0x3c;
defvar DW_OP_lit13 = 0x3d;
defvar DW_OP_lit14 = 0x3e;
defvar DW_OP_lit15 = 0x3f;
defvar DW_OP_lit16 = 0x40;
defvar DW_OP_lit17 = 0x41;
defvar DW_OP_lit18 = 0x42;
defvar DW_OP_lit19 = 0x43;
defvar DW_OP_lit20 = 0x44;
defvar DW_OP_lit21 = 0x45;
defvar DW_OP_lit22 = 0x46;
defvar DW_OP_lit23 = 0x47;
defvar DW_OP_lit24 = 0x48;
defvar DW_OP_lit25 = 0x49;
defvar DW_OP_lit26 = 0x4a;
defvar DW_OP_lit27 = 0x4b;
defvar DW_OP_lit28 = 0x4c;
defvar DW_OP_lit29 = 0x4d;
defvar DW_OP_lit30 = 0x4e;
defvar DW_OP_lit31 = 0x4f;
defvar DW_OP_reg0 = 0x50;
defvar DW_OP_reg1 = 0x51;
defvar DW_OP_reg2 = 0x52;
defvar DW_OP_reg3 = 0x53;
defvar DW_OP_reg4 = 0x54;
defvar DW_OP_reg5 = 0x55;
defvar DW_OP_reg6 = 0x56;
defvar DW_OP_reg7 = 0x57;
defvar DW_OP_reg8 = 0x58;
defvar DW_OP_reg9 = 0x59;
defvar DW_OP_reg10 = 0x5a;
defvar DW_OP_reg11 = 0x5b;
defvar DW_OP_reg12 = 0x5c;
defvar DW_OP_reg13 = 0x5d;
defvar DW_OP_reg14 = 0x5e;
defvar DW_OP_reg15 = 0x5f;
defvar DW_OP_reg16 = 0x60;
defvar DW_OP_reg17 = 0x61;
defvar DW_OP_reg18 = 0x62;
defvar DW_OP_reg19 = 0x63;
defvar DW_OP_reg20 = 0x64;
defvar DW_OP_reg21 = 0x65;
defvar DW_OP_reg22 = 0x66;
defvar DW_OP_reg23 = 0x67;
defvar DW_OP_reg24 = 0x68;
defvar DW_OP_reg25 = 0x69;
defvar DW_OP_reg26 = 0x6a;
defvar DW_OP_reg27 = 0x6b;
defvar DW_OP_reg28 = 0x6c;
defvar DW_OP_reg29 = 0x6d;
defvar DW_OP_reg30 = 0x6e;
defvar DW_OP_reg31 = 0x6f;
defvar DW_OP_breg0 = 0x70;
defvar DW_OP_breg1 = 0x71;
defvar DW_OP_breg2 = 0x72;
defvar DW_OP_breg3 = 0x73;
defvar DW_OP_breg4 = 0x74;
defvar DW_OP_breg5 = 0x75;
defvar DW_OP_breg6 = 0x76;
defvar DW_OP_breg7 = 0x77;
defvar DW_OP_breg8 = 0x78;
defvar DW_OP_breg9 = 0x79;
defvar DW_OP_breg10 = 0x7a;
defvar DW_OP_breg11 = 0x7b;
defvar DW_OP_breg12 = 0x7c;
defvar DW_OP_breg13 = 0x7d;
defvar DW_OP_breg14 = 0x7e;
defvar DW_OP_breg15 = 0x7f;
defvar DW_OP_breg16 = 0x80;
defvar DW_OP_breg17 = 0x81;
defvar DW_OP_breg18 = 0x82;
defvar DW_OP_breg19 = 0x83;
defvar DW_OP_breg20 = 0x84;
defvar DW_OP_breg21 = 0x85;
defvar DW_OP_breg22 = 0x86;
defvar DW_OP_breg23 = 0x87;
defvar DW_OP_breg24 = 0x88;
defvar DW_OP_breg25 = 0x89;
defvar DW_OP_breg26 = 0x8a;
defvar DW_OP_breg27 = 0x8b;
defvar DW_OP_breg28 = 0x8c;
defvar DW_OP_breg29 = 0x8d;
defvar DW_OP_breg30 = 0x8e;
defvar DW_OP_breg31 = 0x8f;
defvar DW_OP_regx = 0x90;
defvar DW_OP_fbreg = 0x91;
defvar DW_OP_bregx = 0x92;
defvar DW_OP_piece = 0x93;
defvar DW_OP_deref_size = 0x94;
defvar DW_OP_xderef_size = 0x95;
defvar DW_OP_nop = 0x96;
defvar DW_OP_push_object_address = 0x97;
defvar DW_OP_call2 = 0x98;
defvar DW_OP_call4 = 0x99;
defvar DW_OP_call_ref = 0x9a;
defvar DW_OP_form_tls_address = 0x9b;
defvar DW_OP_call_frame_cfa = 0x9c;
defvar DW_OP_bit_piece = 0x9d;
defvar DW_OP_implicit_value = 0x9e;
defvar DW_OP_stack_value = 0x9f;
defvar DW_OP_implicit_pointer = 0xa0;
defvar DW_OP_addrx = 0xa1;
defvar DW_OP_constx = 0xa2;
defvar DW_OP_entry_value = 0xa3;
defvar DW_OP_const_type = 0xa4;
defvar DW_OP_regval_type = 0xa5;
defvar DW_OP_deref_type = 0xa6;
defvar DW_OP_xderef_type = 0xa7;
defvar DW_OP_convert = 0xa8;
defvar DW_OP_reinterpret = 0xa9;
/* GNU extensions.  */
defvar DW_OP_GNU_push_tls_address = 0xe0;
defvar DW_OP_GNU_uninit = 0xf0;
defvar DW_OP_GNU_encoded_addr = 0xf1;
defvar DW_OP_GNU_implicit_pointer = 0xf2;
defvar DW_OP_GNU_entry_value = 0xf3;
defvar DW_OP_GNU_const_type = 0xf4;
defvar DW_OP_GNU_regval_type = 0xf5;
defvar DW_OP_GNU_deref_type = 0xf6;
defvar DW_OP_GNU_convert = 0xf7;
defvar DW_OP_GNU_reinterpret = 0xf9;
defvar DW_OP_GNU_parameter_ref = 0xfa;
/* GNU Debug Fission extensions.  */
defvar DW_OP_GNU_addr_index = 0xfb;
defvar DW_OP_GNU_const_index = 0xfc;
defvar  DW_OP_GNU_variable_value = 0xfd;
defvar DW_OP_lo_user = 0xe0;
defvar DW_OP_hi_user = 0xff;
defvar DW_OP_LAST = DW_OP_hi_user;

/* Each DWARF operation contains a 1-byte opcode that identifies the
   operation; followed by a variable number of arguments.  */

deftype Dwarf_Op =
  struct
  {
    uint<8> code : code >= DW_OP_FIRST && code <= DW_OP_LAST;
    union
    {
      uint<8>  u8 : code in [DW_OP_const1u, DW_OP_pick,
                             DW_OP_deref_size, DW_OP_xderef_size];
      int<8>   i8 : code == DW_OP_const1s;

      uint<16> u16 : code in [DW_OP_const2u, DW_OP_call2];
      int<16>  i16 : code in [DW_OP_const2s, DW_OP_skip, DW_OP_bra];

      uint<32> u32 : code in [DW_OP_const4u, DW_OP_call4];
      int<32>  i32 : code == DW_OP_const4s;

      uint<64> u64 : code == DW_OP_const8u;
      int<64>  i64 : code == DW_OP_const8s;

      ULEB128 u128 : (code in [DW_OP_constu, DW_OP_plus_uconst,
                               DW_OP_fbreg, DW_OP_regx, DW_OP_piece]
                      || (code >= DW_OP_breg0 && code <= DW_OP_breg31));

      struct
      {
        ULEB128 reg;
        LEB128 offset;
      } reg_offset : code in [DW_OP_bregx, DW_OP_bit_piece];

      struct
      {
        ULEB128 length;
        byte[length.value] block;
      } size : code == DW_OP_implicit_value;

      Dwarf_Address addr : code == DW_OP_addr;
      Dwarf_Section_Offset offset : code == DW_OP_call_ref;

      /* Other operations have no arguments.  */
      struct {};
    } arg;
  };

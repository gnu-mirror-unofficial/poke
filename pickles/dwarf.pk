/* dwarf.pk - DWARF implementation for GNU poke.  */

/* Copyright (C) 2020 Jose E. Marchesi.  */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

load leb128;

/* Sections:
 *
 * .debug_info
 *     Dwarf_CU_Header
 * .debug_types
 *     Dwarf_Type_Unit_Header
 * .debug_aranges
 * .debug_frame
 *     Dwarf_Call_Frame_Entry[]
 * .debug_abbrev
 * .debug_str
 * .debug_loc
 * .debug_ranges
 * .debug_macinfo
 * .debug_line
 * .debug_pubnames
 *     Dwarf_Name_Lookup_Table
 * .debug_pubtypes
 *     Dwarf_Name_Lookup_Table
 */

/* DWARF Tags.  */

defvar DW_TAG_array_type = 0x01;
defvar DW_TAG_class_type = 0x02;
defvar DW_TAG_entry_point = 0x03;
defvar DW_TAG_enumeration_type = 0x04;
defvar DW_TAG_formal_parameter = 0x05;
/* 0x06 reserved.  */
/* 0x07 reserved.  */
defvar DW_TAG_imported_declaration = 0x08;
/* 0x09 reserved.  */
defvar DW_TAG_label = 0x0a;
defvar DW_TAG_lexical_block = 0x0b;
/* 0x0c reserved.  */
defvar DW_TAG_member = 0x0d;
/* 0x0e reserved.  */
defvar DW_TAG_pointer_type = 0x0f;
defvar DW_TAG_reference_type = 0x10;
defvar DW_TAG_compile_unit = 0x11;
defvar DW_TAG_string_type = 0x12;
defvar DW_TAG_structure_type = 0x13;
/* 0x14 reserved.  */
defvar DW_TAG_subroutine_type = 0x15;
defvar DW_TAG_typedef = 0x16;
defvar DW_TAG_union_type = 0x17;
defvar DW_TAG_unspecified_parameters = 0x18;
defvar DW_TAG_variant = 0x19;
defvar DW_TAG_common_block = 0x1a;
defvar DW_TAG_common_inclusion = 0x1b;
defvar DW_TAG_inheritance = 0x1c;
defvar DW_TAG_inlined_subroutine = 0x1d;
defvar DW_TAG_module = 0x1e;
defvar DW_TAG_ptr_to_member_type = 0x1f;
defvar DW_TAG_set_type = 0x20;
defvar DW_TAG_subrange_type = 0x21;
defvar DW_TAG_with_stmt = 0x22;
defvar DW_TAG_access_declaration = 0x23;
defvar DW_TAG_base_type = 0x24;
defvar DW_TAG_catch_block = 0x25;
defvar DW_TAG_const_type = 0x26;
defvar DW_TAG_constant = 0x27;
defvar DW_TAG_enumerator = 0x28;
defvar DW_TAG_file_type = 0x29;
defvar DW_TAG_friend = 0x2a;
defvar DW_TAG_namelist = 0x2b;
defvar DW_TAG_namelist_item = 0x2c;
defvar DW_TAG_packed_type = 0x2d;
defvar DW_TAG_subprogram = 0x2e;
defvar DW_TAG_template_type_parameter = 0x2f;
defvar DW_TAG_template_value_parameter = 0x30;
defvar DW_TAG_thrown_type = 0x31;
defvar DW_TAG_try_block = 0x32;
defvar DW_TAG_variant_part = 0x33;
defvar DW_TAG_variable = 0x34;
defvar DW_TAG_volatile_type = 0x35;
defvar DW_TAG_dwarf_procedure = 0x36;
defvar DW_TAG_restrict_type = 0x37;
defvar DW_TAG_interface_type = 0x38;
defvar DW_TAG_namespace = 0x39;
defvar DW_TAG_imported_module = 0x3a;
defvar DW_TAG_unspecified_type = 0x3b;
defvar DW_TAG_partial_unit = 0x3c;
defvar DW_TAG_imported_unit = 0x3d;
/* 0x3e reserved.  Was DW_TAG_mutable_type.  */
defvar DW_TAG_condition = 0x3f;
defvar DW_TAG_shared_type = 0x40;
defvar DW_TAG_type_unit = 0x41;
defvar DW_TAG_rvalue_reference_type = 0x42;
defvar DW_TAG_template_alias = 0x43;
defvar DW_TAG_coarray_type = 0x44;
defvar DW_TAG_generic_subrange = 0x45;
defvar DW_TAG_dynamic_type = 0x46;
defvar DW_TAG_atomic_type = 0x47;
defvar DW_TAG_call_site = 0x48;
defvar DW_TAG_call_site_parameter = 0x49;
defvar DW_TAG_skeleton_unit = 0x4a;
defvar DW_TAG_immutable_type = 0x4b;
defvar DW_TAG_lo_user = 0x4080;
defvar DW_TAG_MIPS_loop = 0x4081;
defvar DW_TAG_format_label = 0x4101;
defvar DW_TAG_function_template = 0x4102;
defvar DW_TAG_class_template = 0x4103;
defvar DW_TAG_GNU_BINCL = 0x4104;
defvar DW_TAG_GNU_EINCL = 0x4105;
defvar DW_TAG_GNU_template_template_param = 0x4106;
defvar DW_TAG_GNU_template_parameter_pack = 0x4107;
defvar DW_TAG_GNU_formal_parameter_pack = 0x4108;
defvar DW_TAG_GNU_call_site = 0x4109;
defvar DW_TAG_GNU_call_site_parameter = 0x410a;
defvar DW_TAG_hi_user = 0xfff;

/* Attribute:
   - attribute name.
   - attribute value. */

/* DWARF Attributes.  */

defvar DW_AT_sibling = 0x01;
defvar DW_AT_location = 0x02;
defvar DW_AT_name = 0x03;
/* 0x04 reserved.  */
/* 0x05 reserved.  */
/* 0x06 reserved.  */
/* 0x07 reserved.  */
/* 0x08 reserved.  */
defvar DW_AT_ordering = 0x09;
/* 0x0a reserved.  */
defvar DW_AT_byte_size = 0x0b;
defvar DW_AT_bit_offset = 0x0c;
defvar DW_AT_bit_size = 0x0d;
/* 0x0e reserved.  */
/* 0x0f reserved.  */
defvar DW_AT_stmt_list = 0x10;
defvar DW_AT_low_pc = 0x11;
defvar DW_AT_high_pc = 0x12;
defvar DW_AT_language = 0x13;
/* 0x14 reserved.  */
defvar DW_AT_discr = 0x15;
defvar DW_AT_discr_value = 0x16;
defvar DW_AT_visibility = 0x17;
defvar DW_AT_import = 0x18;
defvar DW_AT_string_length = 0x19;
defvar DW_AT_common_reference = 0x1a;
defvar DW_AT_comp_dir = 0x1b;
defvar DW_AT_const_value = 0x1c;
defvar DW_AT_containing_type = 0x1d;
defvar DW_AT_default_value = 0x1e;
/* 0x1f reserved.  */
defvar DW_AT_inline = 0x20;
defvar DW_AT_is_optional = 0x21;
defvar DW_AT_lower_bound = 0x22;
/* 0x23 reserved.  */
/* 0x24 reserved.  */
defvar DW_AT_producer = 0x25;
/* 0x26 reserved.  */
defvar DW_AT_prototyped = 0x27;
/* 0x28 reserved.  */
/* 0x29 reserved.  */
defvar DW_AT_return_addr = 0x2a;
/* 0x2b reserved.  */
defvar DW_AT_start_scope = 0x2c;
/* 0x2d reserved.  */
defvar DW_AT_bit_stride = 0x2e;
defvar DW_AT_upper_bound = 0x2f;
/* 0x30 reserved.  */
defvar DW_AT_abstract_origin = 0x31;
defvar DW_AT_accessibility = 0x32;
defvar DW_AT_address_class = 0x33;
defvar DW_AT_artificial = 0x34;
defvar DW_AT_base_types = 0x35;
defvar DW_AT_calling_convention = 0x36;
defvar DW_AT_count = 0x37;
defvar DW_AT_data_member_location = 0x38;
defvar DW_AT_decl_column = 0x39;
defvar DW_AT_decl_file = 0x3a;
defvar DW_AT_decl_line = 0x3b;
defvar DW_AT_declaration = 0x3c;
defvar DW_AT_discr_list = 0x3d;
defvar DW_AT_encoding = 0x3e;
defvar DW_AT_external = 0x3f;
defvar DW_AT_frame_base = 0x40;
defvar DW_AT_friend = 0x41;
defvar DW_AT_identifier_case = 0x42;
defvar DW_AT_macro_info = 0x43;
defvar DW_AT_namelist_item = 0x44;
defvar DW_AT_priority = 0x45;
defvar DW_AT_segment = 0x46;
defvar DW_AT_specification = 0x47;
defvar DW_AT_static_link = 0x48;
defvar DW_AT_type = 0x49;
defvar DW_AT_use_location = 0x4a;
defvar DW_AT_variable_parameter = 0x4b;
defvar DW_AT_virtuality = 0x4c;
defvar DW_AT_vtable_elem_location = 0x4d;
defvar DW_AT_allocated = 0x4e;
defvar DW_AT_associated = 0x4f;
defvar DW_AT_data_location = 0x50;
defvar DW_AT_byte_stride = 0x51;
defvar DW_AT_entry_pc = 0x52;
defvar DW_AT_use_UTF8 = 0x53;
defvar DW_AT_extension = 0x54;
defvar DW_AT_ranges = 0x55;
defvar DW_AT_trampoline = 0x56;
defvar DW_AT_call_column = 0x57;
defvar DW_AT_call_file = 0x58;
defvar DW_AT_call_line = 0x59;
defvar DW_AT_description = 0x5a;
defvar DW_AT_binary_scale = 0x5b;
defvar DW_AT_decimal_scale = 0x5c;
defvar DW_AT_small = 0x5d;
defvar DW_AT_decimal_sign = 0x5e;
defvar DW_AT_digit_count = 0x5f;
defvar DW_AT_picture_string = 0x60;
defvar DW_AT_mutable = 0x61;
defvar DW_AT_threads_scaled = 0x62;
defvar DW_AT_explicit = 0x63;
defvar DW_AT_object_pointer = 0x64;
defvar DW_AT_endianity = 0x65;
defvar DW_AT_elemental = 0x66;
defvar DW_AT_pure = 0x67;
defvar DW_AT_recursive = 0x68;
defvar DW_AT_signature = 0x69;
defvar DW_AT_main_subprogram = 0x6a;
defvar DW_AT_data_bit_offset = 0x6b;
defvar DW_AT_const_expr = 0x6c;
defvar DW_AT_enum_class = 0x6d;
defvar DW_AT_linkage_name = 0x6e;
defvar DW_AT_string_length_bit_size = 0x6f;
defvar DW_AT_string_length_byte_size = 0x70;
defvar DW_AT_rank = 0x71;
defvar DW_AT_str_offsets_base = 0x72;
defvar DW_AT_addr_base = 0x73;
defvar DW_AT_rnglists_base = 0x74;
/* 0x75 reserved.  */
defvar DW_AT_dwo_name = 0x76;
defvar DW_AT_reference = 0x77;
defvar DW_AT_rvalue_reference = 0x78;
defvar DW_AT_macros = 0x79;
defvar DW_AT_call_all_calls = 0x7a;
defvar DW_AT_call_all_source_calls = 0x7b;
defvar DW_AT_call_all_tail_calls = 0x7c;
defvar DW_AT_call_return_pc = 0x7d;
defvar DW_AT_call_value = 0x7e;
defvar DW_AT_call_origin = 0x7f;
defvar DW_AT_call_parameter = 0x80;
defvar DW_AT_call_pc = 0x81;
defvar DW_AT_call_tail_call = 0x82;
defvar DW_AT_call_target = 0x83;
defvar DW_AT_call_target_clobbered = 0x84;
defvar DW_AT_call_data_location = 0x85;
defvar DW_AT_call_data_value = 0x86;
defvar DW_AT_noreturn = 0x87;
defvar DW_AT_alignment = 0x88;
defvar DW_AT_export_symbols = 0x89;
defvar DW_AT_deleted = 0x8a;
defvar DW_AT_defaulted = 0x8b;
defvar DW_AT_loclists_base = 0x8c;
defvar DW_AT_lo_user = 0x2000;
defvar DW_AT_MIPS_fde = 0x2001;
defvar DW_AT_MIPS_loop_begin = 0x2002;
defvar DW_AT_MIPS_tail_loop_begin = 0x2003;
defvar DW_AT_MIPS_epilog_begin = 0x2004;
defvar DW_AT_MIPS_loop_unroll_factor = 0x2005;
defvar DW_AT_MIPS_software_pipeline_depth = 0x2006;
defvar DW_AT_MIPS_linkage_name = 0x2007;
defvar DW_AT_MIPS_stride = 0x2008;
defvar DW_AT_MIPS_abstract_name = 0x2009;
defvar DW_AT_MIPS_clone_origin = 0x200a;
defvar DW_AT_MIPS_has_inlines = 0x200b;
defvar DW_AT_MIPS_stride_byte = 0x200c;
defvar DW_AT_MIPS_stride_elem = 0x200d;
defvar DW_AT_MIPS_ptr_dopetype = 0x200e;
defvar DW_AT_MIPS_allocatable_dopetype = 0x200f;
defvar DW_AT_MIPS_assumed_shape_dopetype = 0x2010;
defvar DW_AT_MIPS_assumed_size = 0x2011;
/* GNU extensions.  */
defvar DW_AT_sf_names = 0x2101;
defvar DW_AT_src_info = 0x2102;
defvar DW_AT_mac_info = 0x2103;
defvar DW_AT_src_coords = 0x2104;
defvar DW_AT_body_begin = 0x2105;
defvar DW_AT_body_end = 0x2106;
defvar DW_AT_GNU_vector = 0x2107;
defvar DW_AT_GNU_guarded_by = 0x2108;
defvar DW_AT_GNU_pt_guarded_by = 0x2109;
defvar DW_AT_GNU_guarded = 0x210a;
defvar DW_AT_GNU_pt_guarded = 0x210b;
defvar DW_AT_GNU_locks_excluded = 0x210c;
defvar DW_AT_GNU_exclusive_locks_required = 0x210d;
defvar DW_AT_GNU_shared_locks_required = 0x210e;
defvar DW_AT_GNU_odr_signature = 0x210f;
defvar DW_AT_GNU_template_name = 0x2110;
defvar DW_AT_GNU_call_site_value = 0x2111;
defvar DW_AT_GNU_call_site_data_value = 0x2112;
defvar DW_AT_GNU_call_site_target = 0x2113;
defvar DW_AT_GNU_call_site_target_clobbered = 0x2114;
defvar DW_AT_GNU_tail_call = 0x2115;
defvar DW_AT_GNU_all_tail_call_sites = 0x2116;
defvar DW_AT_GNU_all_call_sites = 0x2117;
defvar DW_AT_GNU_all_source_call_sites = 0x2118;
defvar DW_AT_GNU_locviews = 0x2137;
defvar DW_AT_GNU_entry_view = 0x2138;
defvar DW_AT_GNU_macros = 0x2119;
defvar DW_AT_GNU_deleted = 0x211a;
/* GNU Debug Fission extensions.  */
defvar DW_AT_GNU_dwo_name = 0x2130;
defvar DW_AT_GNU_dwo_id = 0x2131;
defvar DW_AT_GNU_ranges_base = 0x2132;
defvar DW_AT_GNU_addr_base = 0x2133;
defvar DW_AT_GNU_pubnames = 0x2134;
defvar DW_AT_GNU_pubtypes = 0x2135;
/* https://gcc.gnu.org/wiki/DW_AT_GNU_numerator_denominator  */
defvar DW_AT_GNU_numerator = 0x2303;
defvar DW_AT_GNU_denominator = 0x2304;
/* https://gcc.gnu.org/wiki/DW_AT_GNU_bias  */
defvar DW_AT_GNU_bias = 0x2305;
defvar DW_AT_hi_user = 0x3ff;

/* DWARF form encodings.  */

defvar DW_FORM_addr = 0x01;
defvar DW_FORM_block2 = 0x03;
defvar DW_FORM_block4 = 0x04;
defvar DW_FORM_data2 = 0x05;
defvar DW_FORM_data4 = 0x06;
defvar DW_FORM_data8 = 0x07;
defvar DW_FORM_string = 0x08;
defvar DW_FORM_block = 0x09;
defvar DW_FORM_block1 = 0x0a;
defvar DW_FORM_data1 = 0x0b;
defvar DW_FORM_flag = 0x0c;
defvar DW_FORM_sdata = 0x0d;
defvar DW_FORM_strp = 0x0e;
defvar DW_FORM_udata = 0x0f;
defvar DW_FORM_ref_addr = 0x10;
defvar DW_FORM_ref1 = 0x11;
defvar DW_FORM_ref2 = 0x12;
defvar DW_FORM_ref4 = 0x13;
defvar DW_FORM_ref8 = 0x14;
defvar DW_FORM_ref_udata = 0x15;
defvar DW_FORM_indirect = 0x16;
defvar DW_FORM_sec_offset = 0x17;
defvar DW_FORM_exprloc = 0x18;
defvar DW_FORM_flag_present = 0x19;
defvar DW_FORM_strx = 0x1a;
defvar DW_FORM_addrx = 0x1b;
defvar DW_FORM_ref_sup4 = 0x1c;
defvar DW_FORM_strp_sup = 0x1d;
defvar DW_FORM_data16 = 0x1e;
defvar DW_FORM_line_strp = 0x1f;
defvar DW_FORM_ref_sig8 = 0x20;
defvar DW_FORM_implicit_const = 0x21;
defvar DW_FORM_loclistx = 0x22;
defvar DW_FORM_rnglistx = 0x23;
defvar DW_FORM_ref_sup8 = 0x24;
defvar DW_FORM_strx1 = 0x25;
defvar DW_FORM_strx2 = 0x26;
defvar DW_FORM_strx3 = 0x27;
defvar DW_FORM_strx4 = 0x28;
defvar DW_FORM_addrx1 = 0x29;
defvar DW_FORM_addrx2 = 0x2a;
defvar DW_FORM_addrx3 = 0x2b;
defvar DW_FORM_addrx4 = 0x2c;
/* GNU Debug Fission extensions.  */
defvar DW_FORM_GNU_addr_index = 0x1f01;
defvar DW_FORM_GNU_str_index = 0x1f02;
defvar DW_FORM_GNU_ref_alt = 0x1f20;
defvar DW_FORM_GNU_strp_alt = 0x1f21;

/* Common stuff.  */

defvar dwarf_bits = 32;
defvar dwarf_version = 4;

defun dwarf_set_bits = (int bits) int:
  {
    dwarf_bits = bits;
    return 1;
  }

defun dwarf_set_version = (int ver) int:
  {
    dwarf_version = ver;
    return 1;
  }

deftype Dwarf_Initial_Length =
  union
  {
    struct
    {
      uint<32> marker : (marker == 0xffff_ffff
                         && dwarf_set_bits (64));
      offset<uint<64>,B> length;
    } l64;

    offset<uint<32>,B> l32 : (l32 < 0xffff_fff0#B
                              && dwarf_set_bits (32));

    method value = offset<uint<64>,B>:
      {
        try return l32;
        catch if E_elem { return l64.length; }
      }

    method _print = void:
      {
        print ("#<");
        try printf ("%v", l64.length);
        catch if E_elem { printf ("%v", l32); }
        print (">");
      }
  };

deftype Dwarf_Address =
  union
  {
    uint<32> a32 : dwarf_bits == 32;
    uint<64> a64;

    method value = uint<64>:
      {
        try return a32;
        catch if E_elem { return a64; }
      }

    method _print = void:
      {
        print ("#<");
        try printf ("%v", a32);
        catch if E_elem { printf ("%v", a64); }
        print (">");
      }
  };

deftype Dwarf_Section_Offset =
  union
  {
    offset<uint<32>,B> o32 : dwarf_bits == 32;
    offset<uint<64>,B> o64;

    method value = offset<uint<64>,B>:
      {
        try return o32;
        catch if E_elem { return o64; }
      }

    method _print = void:
      {
        print ("#<");
        try printf ("%v", o32);
        catch if E_elem { printf ("%v", o64); }
        print (">");
      }
  };

deftype Dwarf_Block =
  struct
  {
    ULEB128 length;
    byte[length.value] block;
  };

/* DWARF expressions.  */

/* Opcodes.  */

defvar DW_OP_FIRST = 0x03;
defvar DW_OP_addr = 0x03;
defvar DW_OP_deref = 0x06;
defvar DW_OP_const1u = 0x08;
defvar DW_OP_const1s = 0x09;
defvar DW_OP_const2u = 0x0a;
defvar DW_OP_const2s = 0x0b;
defvar DW_OP_const4u = 0x0c;
defvar DW_OP_const4s = 0x0d;
defvar DW_OP_const8u = 0x0e;
defvar DW_OP_const8s = 0x0f;
defvar DW_OP_constu = 0x10;
defvar DW_OP_consts = 0x11;
defvar DW_OP_dup = 0x12;
defvar DW_OP_drop = 0x13;
defvar DW_OP_over = 0x14;
defvar DW_OP_pick = 0x15;
defvar DW_OP_swap = 0x16;
defvar DW_OP_rot = 0x17;
defvar DW_OP_xderef = 0x18;
defvar DW_OP_abs = 0x19;
defvar DW_OP_and = 0x1a;
defvar DW_OP_div = 0x1b;
defvar DW_OP_minus = 0x1c;
defvar DW_OP_mod = 0x1d;
defvar DW_OP_mul = 0x1e;
defvar DW_OP_neg = 0x1f;
defvar DW_OP_not = 0x20;
defvar DW_OP_or = 0x21;
defvar DW_OP_plus = 0x22;
defvar DW_OP_plus_uconst = 0x23;
defvar DW_OP_shl = 0x24;
defvar DW_OP_shr = 0x25;
defvar DW_OP_shra = 0x26;
defvar DW_OP_xor = 0x27;
defvar DW_OP_bra = 0x28;
defvar DW_OP_eq = 0x29;
defvar DW_OP_ge = 0x2a;
defvar DW_OP_gt = 0x2b;
defvar DW_OP_le = 0x2c;
defvar DW_OP_lt = 0x2d;
defvar DW_OP_ne = 0x2e;
defvar DW_OP_skip = 0x2f;
defvar DW_OP_lit0 = 0x30;
defvar DW_OP_lit1 = 0x31;
defvar DW_OP_lit2 = 0x32;
defvar DW_OP_lit3 = 0x33;
defvar DW_OP_lit4 = 0x34;
defvar DW_OP_lit5 = 0x35;
defvar DW_OP_lit6 = 0x36;
defvar DW_OP_lit7 = 0x37;
defvar DW_OP_lit8 = 0x38;
defvar DW_OP_lit9 = 0x39;
defvar DW_OP_lit10 = 0x3a;
defvar DW_OP_lit11 = 0x3b;
defvar DW_OP_lit12 = 0x3c;
defvar DW_OP_lit13 = 0x3d;
defvar DW_OP_lit14 = 0x3e;
defvar DW_OP_lit15 = 0x3f;
defvar DW_OP_lit16 = 0x40;
defvar DW_OP_lit17 = 0x41;
defvar DW_OP_lit18 = 0x42;
defvar DW_OP_lit19 = 0x43;
defvar DW_OP_lit20 = 0x44;
defvar DW_OP_lit21 = 0x45;
defvar DW_OP_lit22 = 0x46;
defvar DW_OP_lit23 = 0x47;
defvar DW_OP_lit24 = 0x48;
defvar DW_OP_lit25 = 0x49;
defvar DW_OP_lit26 = 0x4a;
defvar DW_OP_lit27 = 0x4b;
defvar DW_OP_lit28 = 0x4c;
defvar DW_OP_lit29 = 0x4d;
defvar DW_OP_lit30 = 0x4e;
defvar DW_OP_lit31 = 0x4f;
defvar DW_OP_reg0 = 0x50;
defvar DW_OP_reg1 = 0x51;
defvar DW_OP_reg2 = 0x52;
defvar DW_OP_reg3 = 0x53;
defvar DW_OP_reg4 = 0x54;
defvar DW_OP_reg5 = 0x55;
defvar DW_OP_reg6 = 0x56;
defvar DW_OP_reg7 = 0x57;
defvar DW_OP_reg8 = 0x58;
defvar DW_OP_reg9 = 0x59;
defvar DW_OP_reg10 = 0x5a;
defvar DW_OP_reg11 = 0x5b;
defvar DW_OP_reg12 = 0x5c;
defvar DW_OP_reg13 = 0x5d;
defvar DW_OP_reg14 = 0x5e;
defvar DW_OP_reg15 = 0x5f;
defvar DW_OP_reg16 = 0x60;
defvar DW_OP_reg17 = 0x61;
defvar DW_OP_reg18 = 0x62;
defvar DW_OP_reg19 = 0x63;
defvar DW_OP_reg20 = 0x64;
defvar DW_OP_reg21 = 0x65;
defvar DW_OP_reg22 = 0x66;
defvar DW_OP_reg23 = 0x67;
defvar DW_OP_reg24 = 0x68;
defvar DW_OP_reg25 = 0x69;
defvar DW_OP_reg26 = 0x6a;
defvar DW_OP_reg27 = 0x6b;
defvar DW_OP_reg28 = 0x6c;
defvar DW_OP_reg29 = 0x6d;
defvar DW_OP_reg30 = 0x6e;
defvar DW_OP_reg31 = 0x6f;
defvar DW_OP_breg0 = 0x70;
defvar DW_OP_breg1 = 0x71;
defvar DW_OP_breg2 = 0x72;
defvar DW_OP_breg3 = 0x73;
defvar DW_OP_breg4 = 0x74;
defvar DW_OP_breg5 = 0x75;
defvar DW_OP_breg6 = 0x76;
defvar DW_OP_breg7 = 0x77;
defvar DW_OP_breg8 = 0x78;
defvar DW_OP_breg9 = 0x79;
defvar DW_OP_breg10 = 0x7a;
defvar DW_OP_breg11 = 0x7b;
defvar DW_OP_breg12 = 0x7c;
defvar DW_OP_breg13 = 0x7d;
defvar DW_OP_breg14 = 0x7e;
defvar DW_OP_breg15 = 0x7f;
defvar DW_OP_breg16 = 0x80;
defvar DW_OP_breg17 = 0x81;
defvar DW_OP_breg18 = 0x82;
defvar DW_OP_breg19 = 0x83;
defvar DW_OP_breg20 = 0x84;
defvar DW_OP_breg21 = 0x85;
defvar DW_OP_breg22 = 0x86;
defvar DW_OP_breg23 = 0x87;
defvar DW_OP_breg24 = 0x88;
defvar DW_OP_breg25 = 0x89;
defvar DW_OP_breg26 = 0x8a;
defvar DW_OP_breg27 = 0x8b;
defvar DW_OP_breg28 = 0x8c;
defvar DW_OP_breg29 = 0x8d;
defvar DW_OP_breg30 = 0x8e;
defvar DW_OP_breg31 = 0x8f;
defvar DW_OP_regx = 0x90;
defvar DW_OP_fbreg = 0x91;
defvar DW_OP_bregx = 0x92;
defvar DW_OP_piece = 0x93;
defvar DW_OP_deref_size = 0x94;
defvar DW_OP_xderef_size = 0x95;
defvar DW_OP_nop = 0x96;
defvar DW_OP_push_object_address = 0x97;
defvar DW_OP_call2 = 0x98;
defvar DW_OP_call4 = 0x99;
defvar DW_OP_call_ref = 0x9a;
defvar DW_OP_form_tls_address = 0x9b;
defvar DW_OP_call_frame_cfa = 0x9c;
defvar DW_OP_bit_piece = 0x9d;
defvar DW_OP_implicit_value = 0x9e;
defvar DW_OP_stack_value = 0x9f;
defvar DW_OP_implicit_pointer = 0xa0;
defvar DW_OP_addrx = 0xa1;
defvar DW_OP_constx = 0xa2;
defvar DW_OP_entry_value = 0xa3;
defvar DW_OP_const_type = 0xa4;
defvar DW_OP_regval_type = 0xa5;
defvar DW_OP_deref_type = 0xa6;
defvar DW_OP_xderef_type = 0xa7;
defvar DW_OP_convert = 0xa8;
defvar DW_OP_reinterpret = 0xa9;
/* GNU extensions.  */
defvar DW_OP_GNU_push_tls_address = 0xe0;
defvar DW_OP_GNU_uninit = 0xf0;
defvar DW_OP_GNU_encoded_addr = 0xf1;
defvar DW_OP_GNU_implicit_pointer = 0xf2;
defvar DW_OP_GNU_entry_value = 0xf3;
defvar DW_OP_GNU_const_type = 0xf4;
defvar DW_OP_GNU_regval_type = 0xf5;
defvar DW_OP_GNU_deref_type = 0xf6;
defvar DW_OP_GNU_convert = 0xf7;
defvar DW_OP_GNU_reinterpret = 0xf9;
defvar DW_OP_GNU_parameter_ref = 0xfa;
/* GNU Debug Fission extensions.  */
defvar DW_OP_GNU_addr_index = 0xfb;
defvar DW_OP_GNU_const_index = 0xfc;
defvar  DW_OP_GNU_variable_value = 0xfd;
defvar DW_OP_lo_user = 0xe0;
defvar DW_OP_hi_user = 0xff;
defvar DW_OP_LAST = DW_OP_hi_user;

/* Each DWARF operation contains a 1-byte opcode that identifies the
   operation; followed by a variable number of arguments.  */

deftype Dwarf_Op =
  struct
  {
    uint<8> code : code >= DW_OP_FIRST && code <= DW_OP_LAST;
    union
    {
      uint<8>  u8 : code in [DW_OP_const1u, DW_OP_pick,
                             DW_OP_deref_size, DW_OP_xderef_size];
      int<8>   i8 : code == DW_OP_const1s;

      uint<16> u16 : code in [DW_OP_const2u, DW_OP_call2];
      int<16>  i16 : code in [DW_OP_const2s, DW_OP_skip, DW_OP_bra];

      uint<32> u32 : code in [DW_OP_const4u, DW_OP_call4];
      int<32>  i32 : code == DW_OP_const4s;

      uint<64> u64 : code == DW_OP_const8u;
      int<64>  i64 : code == DW_OP_const8s;

      ULEB128 u128 : (code in [DW_OP_constu, DW_OP_plus_uconst,
                               DW_OP_fbreg, DW_OP_regx, DW_OP_piece]
                      || (code >= DW_OP_breg0 && code <= DW_OP_breg31));

      struct
      {
        ULEB128 reg;
        LEB128 offset;
      } reg_offset : code in [DW_OP_bregx, DW_OP_bit_piece];

      struct
      {
        ULEB128 length;
        byte[length.value] block;
      } size : code == DW_OP_implicit_value;

      Dwarf_Address addr : code == DW_OP_addr;
      Dwarf_Section_Offset offset : code == DW_OP_call_ref;

      /* Other operations have no arguments.  */
      struct {};
    } arg;
  };

/* CFA expressions.   */

deftype Dwarf_CFA_Expression =
  struct
  {
    ULEB128 reg;
    ULEB128 len;
    Dwarf_Op[len.value()#B] exp;
  };

/* **** DWARF Call Frame Information **** */

/* Call Frame Instructions.  */

defvar DW_CFA_advance_loc = 0x40;
defvar DW_CFA_offset = 0x80;
defvar DW_CFA_restore = 0xc0;
defvar DW_CFA_extended = 0;

defvar DW_CFA_nop = 0x00;
defvar DW_CFA_set_loc = 0x01;
defvar DW_CFA_advance_loc1 = 0x02;
defvar DW_CFA_advance_loc2 = 0x03;
defvar DW_CFA_advance_loc4 = 0x04;
defvar DW_CFA_offset_extended = 0x05;
defvar DW_CFA_restore_extended = 0x06;
defvar DW_CFA_undefined = 0x07;
defvar DW_CFA_same_value = 0x08;
defvar DW_CFA_register = 0x09;
defvar DW_CFA_remember_state = 0x0a;
defvar DW_CFA_restore_state = 0x0b;
defvar DW_CFA_def_cfa = 0x0c;
defvar DW_CFA_def_cfa_register = 0x0d;
defvar DW_CFA_def_cfa_offset = 0x0e;
defvar DW_CFA_def_cfa_expression = 0x0f;
defvar DW_CFA_expression = 0x10;
defvar DW_CFA_offset_extended_sf = 0x11;
defvar DW_CFA_def_cfa_sf = 0x12;
defvar DW_CFA_def_cfa_offset_sf = 0x13;
defvar DW_CFA_val_offset = 0x14;
defvar DW_CFA_val_offset_sf = 0x15;
defvar DW_CFA_val_expression = 0x16;

defvar DW_CFA_low_user = 0x1c;
defvar DW_CFA_MIPS_advance_loc8 = 0x1d;
defvar DW_CFA_GNU_window_save = 0x2d;
defvar DW_CFA_GNU_args_size = 0x2e;
defvar DW_CFA_GNU_negative_offset_extended = 0x2f;
defvar DW_CFA_high_user = 0x3f;

deftype Dwarf_CFI =
  struct
  {
    struct uint<8>
    {
      uint<2> primary;
      uint<6> extop;
    } code;

    defvar ecode = code.extop;

    /* Off-opcode arguments follow.  */
    union
    {
      ULEB128 u128      : ecode == DW_CFA_offset;
      Dwarf_Address addr : ecode == DW_CFA_set_loc;
      /* XXX: offsets for advance_locN? */
      uint<8> u8        : ecode == DW_CFA_advance_loc1;
      uint<16> u16      : ecode == DW_CFA_advance_loc2;
      uint<32> u32      : ecode == DW_CFA_advance_loc4;
      uint<64> u64      : ecode == DW_CFA_MIPS_advance_loc8;

      struct
      {
        ULEB128 reg;
        ULEB128 off;
      } reg_offset      : ecode in [DW_CFA_offset_extended,
                                    DW_CFA_def_cfa,
                                    DW_CFA_val_offset];

      struct
      {
        ULEB128 reg;
        LEB128 off;
      } reg_soffset     : ecode in [DW_CFA_offset_extended_sf,
                                    DW_CFA_def_cfa_sf,
                                    DW_CFA_val_offset_sf];

      ULEB128 reg       : ecode in [DW_CFA_restore_extended,
                                    DW_CFA_undefined,
                                    DW_CFA_same_value,
                                    DW_CFA_def_cfa_register];

      ULEB128[2] regs   : ecode == DW_CFA_register;

      ULEB128 offset    : ecode == DW_CFA_def_cfa_offset;
      LEB128 soffset    : ecode == DW_CFA_def_cfa_offset_sf;

      Dwarf_Block block : ecode == DW_CFA_def_cfa_expression;

      struct
      {
        ULEB128 reg;
        Dwarf_Block block;
      } reg_block       : ecode in [DW_CFA_expression,
                                    DW_CFA_val_expression];

      /* Other instructions have no operands. */
      struct {};
    } ops;
  };

/* DWARF Common Information Entry (CIE)

   There is at least one CIE in every non-empty .debug_frame
   section.  */

deftype Dwarf_CIE =
  struct
  {
    /* Size of the CIE structure, not including the `length' field
       itself.  */
    Dwarf_Initial_Length length;

    /* Constant used to distinguish CIEs from FDEs.  */
    union
    {
      uint<32> u32 : (dwarf_bits == 32
                      && u32 == 0xffff_ffff);
      uint<64> u64 : u64 == 0xffff_ffff_ffff_ffff;
    } cie_id;

    /* This version number is specific to the call frame information
       and is independent of the DWARF version number.  */
    uint<8> version : ((dwarf_version == 2 && version == 1)
                       || (dwarf_version == 3 && version == 3)
                       || (dwarf_version == 4 && version == 1 /* XXX 4 */));

    /* UTF-8 string that identifies the augmentation to this CIE or to
       the FDEs that use it.  If there is no augmentation this value
       is a zero byte.  */
    string augmentation;

    /* Size of a target address in this CIE and any FDEs that use it.
       If a CU exists for this frame, its address size must match the
       address size here.  */
    offset<uint<8>,B> address_size;

    /* Size of a segment selector in this CIE and any FDEs that use
       it.  */
    offset<uint<8>,B> segment_size;

    /* A constant that is factored out of all advance location
       instructions.  */
    ULEB128 code_alignment_factor;

    /* A constant that is factored out of certain offset
       instructions.  */
    LEB128 data_alignment_factor;

    /* Constant that indicates which column in the rule table
       represents the return address of the function.  */
    ULEB128 return_address_register;

    defvar insn_size = (length.value
                        - cie_id'size
                        - version'size
                        - augmentation'size
                        - address_size'size
                        - segment_size'size
                        - code_alignment_factor'size
                        - data_alignment_factor'size
                        - return_address_register'size);

    Dwarf_CFI[insn_size] initial_instructions;
  };

/* DWARF FDE.
   Description of a frame for a given function.  */

deftype Dwarf_FDE =
  struct
  {
    /* Size of the header and instruction stream for this function,
       not including the `length' field itself.  */
    Dwarf_Initial_Length length;

    /* Offset into the .debug_frame section that denotes the CIE that
       is associated with this FDE.  */
    Dwarf_Section_Offset cie_pointer;

    /* XXX initial_location (segment selector and target address)  */
    Dwarf_Address initial_location;

    /* Number of bytes of program instructions described by this
       entry.  */
    Dwarf_Address address_range;

    defvar padding = (length.value
                      - (cie_pointer'size + initial_location'size
                         + address_range'size + address_range.value()#B));

    Dwarf_CFI[address_range.value()#B + padding] instructions;
  };

/* Call Frame Information.  */

deftype Dwarf_Call_Frame_Entry =
  union
  {
    Dwarf_CIE cie;
    Dwarf_FDE fde;
  };

/* Name Lookup Tables.

   The sections .debug_pubnames and .debug_pubtypes contain a name
   lookup table each.  */

deftype Dwarf_Name_Lookup_Table =
  struct
  {
    /* Lenght of the set of entries for this CU, not including the
       length field itself.  */
    Dwarf_Initial_Length unit_length;

    uint<16> version : (dwarf_version >= 3 && version == 2);

    /* Offset into the .debug_info section of the CU header.  */
    Dwarf_Section_Offset debug_info_offset;

    /* Size of the contents of the .debug_info section generated to
       represent this CU.  */
    Dwarf_Initial_Length debug_info_length;

    /* The header is followed by a set of entries, which are finished
       by an offset containing the value 0.  */

    deftype Global_Name =
      struct
      {
        Dwarf_Section_Offset offset : offset.value != 0#B;
        string name;
      };

    Global_Name[] names;
    Dwarf_Section_Offset terminator : terminator.value == 0#B;

    /* Return the offset in .debug_info of the object with name NAME.
       If no such object is stored in the table, raise E_generic.  */
    method lookup = (string str) offset<uint<64>,B>:
      {
        for (name in names where name.name == str)
          return name.offset.value;
        raise E_generic;
      }
  };

/* Type Unit Header.  */

deftype Dwarf_Type_Unit_Header =
  struct
  {
    /* Lenght of the .debug_types contribution for this CU, not
       including the length field itself.  */
    Dwarf_Initial_Length unit_length;

    /* Version of the DWARF information in this CU.  */
    uint<16> version : version == 4;

    /* Offset into the .debug_abbrev section that associates this CU
       with a particular set of debugging information entry
       abbreviations.  */
    Dwarf_Section_Offset debug_abbrev_offset;

    /* Size of an address on the target architecture.  */
    offset<uint<8>,B> address_size;

    /* Unique signature of the type described in this type unit.  */
    uint<64> type_signature;

    /* Offset relative to the beginning of the type unit header,
       referring to the DIE that describes the type.  */
    Dwarf_Section_Offset type_offset;
  };

/* Contributions are stored in .debug_info sections.  */

/* Compilation unit header.  */

deftype Dwarf_CU_Header =
  struct
  {
    /* Length of the .debug_info contribution for this CU, not
       including the length field itself.  */
    Dwarf_Initial_Length unit_length;

    /* Version of the DWARF information for the compilation unit.  */
    uint<16> version : (version in [2, 3, 4, 5]
                        && dwarf_set_version (version));

    /* Offset into the .debug_abbrev section that associates the
       compilation unit with a particular set of debugging information
       entry abbreviations.  */
    Dwarf_Section_Offset debug_abbrev_offset;

    /* Size of an address on the target architecture.  */
    offset<uint<8>,B> address_size;
  };

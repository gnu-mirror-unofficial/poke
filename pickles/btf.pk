/* btf.pk - BTF implementation for GNU poke.  */

/* Copyright (C) 2019, 2020 Jose E. Marchesi.  */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* This file contains a description of the Linux BPF Type Format, as
   documented in https://www.kernel.org/doc/html/latest/bpf/btf.html
   (fetched 2019-10-25) */

var BTF_KIND_UKNONWN = 0;
var BTF_KIND_INT = 1;
var BTF_KIND_PTR = 2;
var BTF_KIND_ARRAY = 3;
var BTF_KIND_STRUCT = 4;
var BTF_KIND_UNION = 5;
var BTF_KIND_ENUM = 6;
var BTF_KIND_FWD = 7;
var BTF_KIND_TYPEDEF = 8;
var BTF_KIND_VOLATILE = 9;
var BTF_KIND_CONST = 10;
var BTF_KIND_RESTRICT = 11;
var BTF_KIND_FUNC = 12;
var BTF_KIND_FUNC_PROTO = 13;
var BTF_KIND_VAR = 14;
var BTF_KIND_DATASEC = 15;

var btf_kind_names =
  ["unkn", "int", "ptr", "array", "struct", "union", "enum",
   "fwd", "typedef", "volatile", "const", "restrict", "func",
   "func_proto", "var", "datasec"];

type BTF_Type_Id = uint<32>;

type BTF_Int =
  struct uint<32>
  {
    uint<4>;
    uint<1>;
    uint<1> bool_p;
    uint<1> char_p;
    uint<1> signed_p;
    uint<8> offset;
    uint<8>;
    uint<8> bits;

    /* XXX turn `encoding' into a nested integral struct once we
       support it in the compiler.  */
    method encoding = uint<4>:
    {
      return bool_p:::char_p:::signed_p;
    }
  };

type BTF_Array =
  struct
  {
    BTF_Type_Id elem_type;
    uint<32> index_type;
    uint<32> nelems;
  };

type BTF_Enum =
  struct
  {
    offset<uint<32>,B> name;
    int<32> val;
  };

type BTF_Param =
  struct
  {
    offset<uint<32>,B> name;
    BTF_Type_Id param_type;
  };

type BTF_Variable =
  struct
  {
    uint<32> linkage;
  };

type BTF_Var_SecInfo =
  struct
  {
    BTF_Type_Id var_type;
    offset<uint<32>,B> offset;
    offset<uint<32>,B> size;
  };

type BTF_Type =
  struct
  {
    offset<uint<32>,B> name;

    struct uint<32>
    {
      uint<1> kind_flag;
      uint<3>;
      uint<4> kind;
      uint<8>;
      uint<16> vlen;

      method _print = void:
        {
          printf ("#<%s,kind_flag:%u32d,vlen:%v>",
                  btf_kind_names[kind], kind_flag, vlen);
        }
    } info;

    union
    {
      uint<32> size : (info.kind in [BTF_KIND_INT,
                                     BTF_KIND_ENUM,
                                     BTF_KIND_STRUCT,
                                     BTF_KIND_UNION]);
      BTF_Type_Id type_id;
    } attrs;

    /* XXX move these types to the top-level once we get support to
       pass arguments to struct types.  */

    type BTF_Member =
      struct
      {
        offset<uint<32>,B> name;
        BTF_Type_Id type_id;
        union
        {
          uint<32> member_offset : !info.kind_flag;
          struct
          {
            uint<8> bitfield_size;
            uint<24> bit_offset;
          } bitfield;
        } offset;
      };

    type BTF_Func_Proto =
      struct
      {
        BTF_Param[info.vlen] params;
      };

    union
    {
      BTF_Int integer                    : info.kind == BTF_KIND_INT;
      BTF_Array array                    : info.kind == BTF_KIND_ARRAY;
      BTF_Enum[info.vlen] enum           : info.kind == BTF_KIND_ENUM;
      BTF_Func_Proto func_proto          : info.kind == BTF_KIND_FUNC_PROTO;
      BTF_Variable variable              : info.kind == BTF_KIND_VAR;
      BTF_Member[info.vlen] members      : info.kind == BTF_KIND_UNION;
      BTF_Var_SecInfo[info.vlen] datasec : info.kind == BTF_KIND_DATASEC;

      struct {};
    } data;

    method vararg_p = int:
      {
        var last_param = data.func_proto.params[info.vlen - 1];
        return (last_param.name == 0#B && last_param.param_type == 0);
      }
  };

type BTF_Header =
  struct
  {
    uint<16> magic : ((magic == 0x9feb && set_endian (ENDIAN_BIG)
                       || (magic == 0xeb9f && set_endian (ENDIAN_LITTLE))));
    uint<8> version;
    uint<8> flags;
    offset<uint<32>,B> hdr_len; /* Size of this header.  */

    /* The offsets below are relative to the end of this header.  */
    offset<uint<32>,B> type_off;
    offset<uint<32>,B> type_len;
    offset<uint<32>,B> str_off;
    offset<uint<32>,B> str_len;
  };

fun btf_types = (BTF_Header hdr) BTF_Type[]:
  {
   return BTF_Type[hdr.type_len] @ (hdr'offset + hdr'size + hdr.type_off);
  }

fun btf_strings = (BTF_Header hdr) string[]:
  {
   return string[hdr.str_len] @ (hdr'offset + hdr'size + hdr.str_off);
  }

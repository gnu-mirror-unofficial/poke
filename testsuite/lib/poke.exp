# poke.exp - Infrastructure for testing poke in interactive mode.

# Copyright (C) 2019-2022 Jose E. Marchesi
# Copyright (C) 2014-2020 Free Software Foundation

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Generic poke subroutines.

if {$tool == ""} {
    send_error "`site.exp' not found, run `make site.exp'!\n"
}

# Load other libraries here:
load_lib standard.exp
load_lib dejagnu.exp

# POKE is the tool to test.  This can be set by the user on the
# command line:
# $ make check RUNTESTFLAGS=POKE=poke

global POKE
if ![info exists POKE] {
    set POKE ${objdir}/../poke/poke
}

# Pattern for selection of tests.

set tests_pattern {*.pk}
set tests_pattern_pk {*-test.pk}
if [info exists env(TESTS)] {
    set tests_pattern $env(TESTS)
    set tests_pattern_pk $env(TESTS)
}

# prompt is the poke prompt to expect from the program.  As this can
# change we can put it in a variable that can be easily modified later.

if ![info exists prompt] then {
    set poke_prompt "\\(poke\\)"
}

set timeout 3

# poke_killed determines whether a poke got killed by the test
# infrastructure, for example after poke hangs and causes a timeout.
# Any further poke_test_cmd is failed until poke_exit resets this to
# 0.

set poke_killed 0

#
# poke_exit -- exit poke and cleanup
#
proc poke_exit {} {
    global poke_killed

    if {$poke_killed} {
        set poke_killed 0
    } else {
        send "\n" ;# Discard any previous input.
        send "exit\n"
    }
}

proc poke_version {} {}

proc poke_start {} {
    global POKE
    global poke_prompt
    global spawn_id

    #send_user "Executing $POKE --quiet\n"

    spawn $POKE -q --quiet --no-hserver --color=no
    expect {
        -re "$poke_prompt $" { }
        timeout { perror "Failed to spawn $POKE (timeout)"; exit 1 }
    }
}

proc poke_send {input pattern} {
    global spawn_id
    global test
    global poke_killed
    global poke_prompt

    if {$poke_killed} {
        fail "$test (killed)"
        return
    }

    send "$input"
    expect {
        -re $pattern { pass "$test" }
        timeout {
            exec kill -9 [exp_pid]
            set poke_killed 1
            fail "$test (timeout)"
        }
    }
}

proc poke_send_signal {sig} {
    exec kill -$sig [exp_pid]
}

proc poke_test_cmd {cmd pattern} {
    global poke_prompt
    global spawn_id
    global test
    global poke_killed

    if {$poke_killed} {
        fail "$test (killed)"
        return
    }

    if [string equal $pattern {}] then {
        set expected_pattern "\r\n$poke_prompt $"
    } else {
        set expected_pattern "\r\n$pattern\r\n$poke_prompt $"
    }

    send "$cmd\n"
    expect {
        -re $expected_pattern { pass "$test" }
        -re "$poke_prompt $" {
            fail "$test (bad match)"
        }
        timeout {
            exec kill -9 [exp_pid]
            set poke_killed 1
            fail "$test (timeout)"
        }
    }
}

# Given WRES, the result from "wait", issue a PASS
# if the spawnee exited cleanly, or a FAIL for various kinds of
# unexpected exits.

proc verify_exit_status { executable wres } {
    set pid [lindex $wres 0]
    set spawnid [lindex $wres 1]
    set os_error_flag [lindex $wres 2]
    set value [lindex $wres 3]
    verbose "pid: $pid" 3
    verbose "spawnid: $spawnid" 3
    verbose "os_error_flag: $os_error_flag" 3
    verbose "value: $value" 3

    # Detect segfaults etc:
    if { [llength $wres] > 4 } {
        if { [lindex $wres 4] == "CHILDKILLED" } {
            fail "$executable killed: $wres"
            return
        }
    }
    if { $os_error_flag != 0 } {
        fail "$executable: OS error: $wres"
        return
    }
    if { $value != 0 } {
        fail "$executable: non-zero exit code: $wres"
        return
    }
    pass "$executable exited cleanly"
}

# This is `host_execute` from `dejagnu-1.6.2-release/lib/dejagnu.exp`
# modified to call `verify_exit_status` at the end.

proc verified_host_execute {args} {
    global text

    set timeoutmsg "Timed out: Never got started, "
    set timeout 100
    set file all
    set timetol 0
    set arguments ""

    if { [llength $args] == 0} {
        set executable $args
    } else {
        set executable [string trimleft [lindex [split $args " "] 0] "\{"]
        set params [string trimleft [lindex [split $args " "] 1] "\{"]
        set params [string trimright $params "\}"]
    }

    verbose "The executable is $executable" 2
    if {![file exists ${executable}]} {
        perror "The executable, \"$executable\" is missing" 0
        return "No source file found"
    }

    # spawn the executable and look for the DejaGnu output messages from the
    # test case.
    # spawn -noecho -open [open "|./${executable}" "r"]
    spawn -noecho "./${executable}" ${params}
    set prefix "\[^\r\n\]*"
    expect {
        -re "^$prefix\[0-9\]\[0-9\]:..:..:${text}*\r\n" {
            regsub "\[\n\r\t\]*NOTE: $text\r\n" $expect_out(0,string) "" output
            verbose "$output" 3
            set timetol 0
            exp_continue
        }
        -re "^$prefix\tNOTE:${text}*" {
            regsub "\[\n\r\t\]*NOTE: $text\r\n" $expect_out(0,string) "" output
            set output [string range $output 6 end]
            verbose "$output" 2
            set timetol 0
            exp_continue
        }
        -re "^$prefix\tPASSED:${text}*" {
            regsub "\[\n\r\t\]*PASSED: $text\r\n" $expect_out(0,string) "" output
            set output [string range $output 8 end]
            pass "$output"
            set timetol 0
            exp_continue
        }
        -re "^$prefix\tFAILED:${text}*" {
            regsub "\[\n\r\t\]*FAILED: $text\r\n" $expect_out(0,string) "" output
            set output [string range $output 8 end]
            fail "$output"
            set timetol 0
            exp_continue
        }
        -re "^$prefix\tUNTESTED:${text}*" {
            regsub "\[\n\r\t\]*TESTED: $text\r\n" $expect_out(0,string) "" output
            set output [string range $output 8 end]
            untested "$output"
            set timetol 0
            exp_continue
        }
        -re "^$prefix\tUNRESOLVED:${text}*" {
            regsub "\[\n\r\t\]*UNRESOLVED: $text\r\n" $expect_out(0,string) "" output
            set output [string range $output 8 end]
            unresolved "$output"
            set timetol 0
            exp_continue
        }
        -re "^Totals" {
            verbose "All done" 2
        }
        eof {
            #       unresolved "${executable} died prematurely"
            #       catch close
            #       return "${executable} died prematurely"
        }
        timeout {
            warning "Timed out executing test case"
            if { $timetol <= 2 } {
                incr timetol
                exp_continue
            } else {
                catch close
                return "Timed out executing test case"
            }
        }
        -re "^$prefix\r\n" {
            exp_continue
        }
    }

    catch wait wres
    verify_exit_status $executable $wres

    # force a close of the executable to be safe.
    catch close
    return ""
}

# Return the name of a temporary directory honoring $TMPDIR.  The
# directory and all content therein will be cleaned up at the end of
# the testsuite.
#
# poke-tmpdir

proc poke-tmpdir { args } {
    global poke_data_files

    set tmpdir /tmp
    catch {set tmpdir $::env(TMPDIR)}
    set subdir [file join $tmpdir poketest.[pid]]

    if {! [file exists $subdir]} {
        file mkdir $subdir
        lappend poke_data_files $subdir
    }
    return $subdir
}

# poke-pk.exp - Infrastructure for testing pickles

# Copyright (C) 2020, 2021 The poke authors

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

load_lib "poke.exp"

# TAP Execute
#
# A TAP consumer that translates TAP to DejaGNU.

proc tap_execute {pkfile} {
    global POKE
    set timeoutmsg "Timed out: Never got started, "
    set timeout 100
    set file all
    set timetol 0
    set executable $POKE

    verbose "The executable is $executable" 2
    if {![file exists ${executable}]} {
        perror "The executable, \"$executable\" is missing" 0
        return "Poke interpreter is missing"
    }
    verbose "The pkfile is $pkfile" 2
    if {![file exists ${pkfile}]} {
        perror "The poke file \"$pkfile\" is missing" 0
        return "No source file found"
    }

    # spawn the executable and look for the TAP output messages from the
    # test case.
    spawn -noecho "${executable}" --no-hserver --color=no -q -L ${pkfile}
    set txt "\[^\r\n\]*"
    set num "\[0-9\]\[0-9\]*"
    expect {
        -re "^1..0 # (Skipped: $txt)\r\n" {
            set output $expect_out(1,string)
            untested "$pkfile: $output"
            set timetol 0
            exp_continue
        }
        -re "1..${num}\r\n" {
            exp_continue
        }
        -re "^ok ($txt) # SKIP ($txt)\r\n" {
            set output "$expect_out(1,string): $expect_out(2,string)"
            untested "$pkfile: $output"
            set timetol 0
            exp_continue
        }
        -re "^ok ($txt) # TODO ($txt)\r\n" {
            set output "$expect_out(1,string): $expect_out(2,string)"
            xpass "$pkfile: $output"
            set timetol 0
            exp_continue
        }
        -re "^not ok ($txt) # TODO ($txt)\r\n" {
            set output "$expect_out(1,string): $expect_out(2,string)"
            xfail "$pkfile: $output"
            set timetol 0
            exp_continue
        }
        -re "^ok (${txt})\r\n" {
            set output $expect_out(1,string)
            pass "$pkfile: $output"
            set timetol 0
            exp_continue
        }
        -re "^not ok (${txt})\r\n" {
            set output $expect_out(1,string)
            fail "$pkfile: $output"
            set timetol 0
            exp_continue
        }
        eof {
        }
        timeout {
            warning "Timed out executing test case"
            if { $timetol <= 2 } {
                incr timetol
                exp_continue
            } else {
                catch close
                return "Timed out executing test case"
            }
        }
        -re "^\[^\r\n\]*\r\n" {
        }
    }

    catch wait wres
    verify_exit_status $executable $wres

    # force a close of the executable to be safe.
    catch close
    return ""
}

proc pk-runtest {pkfiles} {
    foreach pkfile $pkfiles {
        set status [tap_execute "$pkfile"]

        if { $status ne "" } {
            fail "tap_execute failed for $pkfile: $status"
        }
    }
}

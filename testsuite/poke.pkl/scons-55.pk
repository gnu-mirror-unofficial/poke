/* { dg-do run } */

type ULEB_128 =
  struct
  {
    type ULEB_128_Byte =
      struct
      {
        byte b : b < 0x7f;
      };

    ULEB_128_Byte[] variable;
    byte last;

    method value = uint<64>:
      {
       var result = 0UL;
       var shift = 0;

       if (variable'length > 8)
         /* For now poke supports up to 64-bit integers.  */
         raise E_generic;

       for (v in variable)
         result = result | ((v.b & 0x7f) <<. shift);
       result = result | (last & 0x7f) <<. shift;

       return result;
      }

    method _print = void:
      {
       var val = 0UL;

       try val = value;
       catch { print "<inv>"; return; }

       printf ("<%u64d>", value);
      }
  };

/* { dg-command {var u = ULEB_128 {} } } */
/* { dg-command {u.value} } */
/* { dg-output "0UL" } */

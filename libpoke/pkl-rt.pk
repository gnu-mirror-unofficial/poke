/* pkl-rt.pkl - Run-time library for the poke compiler.  */

/* Copyright (C) 2019, 2020, 2021 Jose E. Marchesi.  */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* Compiler built-ins. */

fun rand = (uint<32> seed = 0) int<32>: __PKL_BUILTIN_RAND__;
fun get_endian = int<32>: __PKL_BUILTIN_GET_ENDIAN__;
fun set_endian = (int<32> endian) int<32>: __PKL_BUILTIN_SET_ENDIAN__;
fun get_ios = int<32>: __PKL_BUILTIN_GET_IOS__;
fun set_ios = (int<32> ios) int<32>: __PKL_BUILTIN_SET_IOS__;
fun open = (string handler, uint<64> flags = 0) int<32>: __PKL_BUILTIN_OPEN__;
fun close = (int<32> ios) void: __PKL_BUILTIN_CLOSE__;
fun iosize = (int<32> ios = get_ios) offset<uint<64>,1>: __PKL_BUILTIN_IOSIZE__;
fun getenv = (string name) string: __PKL_BUILTIN_GETENV__;
fun flush = (int<32> ios, offset<uint<64>,1> offset) void: __PKL_BUILTIN_FORGET__;
fun get_time = int<64>[2]: __PKL_BUILTIN_GET_TIME__;
fun strace = void: __PKL_BUILTIN_STRACE__;
fun term_get_color = int<32>[3]: __PKL_BUILTIN_TERM_GET_COLOR__;
fun term_set_color = (int<32>[3] color) void: __PKL_BUILTIN_TERM_SET_COLOR__;
fun term_get_bgcolor = int<32>[3]: __PKL_BUILTIN_TERM_GET_BGCOLOR__;
fun term_set_bgcolor = (int<32>[3] color) void: __PKL_BUILTIN_TERM_SET_BGCOLOR__;
fun term_begin_class = (string class) void: __PKL_BUILTIN_TERM_BEGIN_CLASS__;
fun term_end_class = (string class) void: __PKL_BUILTIN_TERM_END_CLASS__;
fun term_begin_hyperlink = (string url, string id) void: __PKL_BUILTIN_TERM_BEGIN_HYPERLINK__;
fun term_end_hyperlink = void: __PKL_BUILTIN_TERM_END_HYPERLINK__;

var ENDIAN_LITTLE = 0;
var ENDIAN_BIG = 1;

/* IOS flags and modes.

   There is space for 64 flags in the uint<64> optional argument to
   `open'.  The flags in the least-significative 32 bits are valid for
   all IOD backends and are defined below.  The most-significative 32
   bits are reserved for backend-specific flags.

   Please keep these values in sync with the constants in ios.c.  */

var IOS_F_READ   = 1;
var IOS_F_WRITE  = 2;
var IOS_F_TRUNCATE = 8;
var IOS_F_CREATE = 16;

var IOS_M_RDONLY = IOS_F_READ;
var IOS_M_WRONLY = IOS_F_WRITE;
var IOS_M_RDWR = IOS_F_READ | IOS_F_WRITE;

/* Exceptions.  */

/* IMPORTANT: if you make changes to the Exception struct, please
   update the pvm_make_exception function in pvm-val.c
   accordingly.  */

type Exception =
  struct
  {
    int<32> code;
    string msg;
    int<32> exit_status;
  };

/* Standard exception codes.
   These codes should be in sync with PVM_E_* macros in pvm.h.
   Note that user-defined exceptions must have codes starting with
   255 (and should be registered using exception_code function defined
   below).
   Note also that EC_generic _must_ be zero.  */

var EC_generic       = 0;
var EC_div_by_zero   = 1;
var EC_no_ios        = 2;
var EC_no_return     = 3;
var EC_out_of_bounds = 4;
var EC_map_bounds    = 5;
var EC_eof           = 6;
var EC_map           = 7;
var EC_conv          = 8;
var EC_elem          = 9;
var EC_constraint    = 10;
var EC_io            = 11;
var EC_signal        = 12;
var EC_io_flags      = 13;
var EC_inval         = 14;
var EC_exit          = 15;
var EC_assert        = 16;
var EC_overflow      = 17;

/* Standard exceptions.  */

var E_generic
  = Exception {code = EC_generic, msg = "generic", exit_status = 1};
var E_div_by_zero
  = Exception {code = EC_div_by_zero, msg = "division by zero", exit_status = 1};
var E_no_ios
  = Exception {code = EC_no_ios, msg = "no IOS", exit_status = 1};
var E_no_return
  = Exception {code = EC_no_return, msg = "no return", exit_status = 1};
var E_out_of_bounds
  = Exception {code = EC_out_of_bounds, msg = "out of bounds", exit_status = 1};
var E_map_bounds
  = Exception {code = EC_map_bounds, msg = "out of map bounds", exit_status = 1};
var E_eof
  = Exception {code = EC_eof, msg = "EOF", exit_status = 0 };
var E_map
  = Exception {code = EC_map, msg = "no map", exit_status = 1};
var E_conv
  = Exception {code = EC_conv, msg = "conversion error", exit_status = 1};
var E_elem
  = Exception {code = EC_elem, msg = "invalid element", exit_status = 1};
var E_constraint
  = Exception {code = EC_constraint, msg = "constraint violation", exit_status = 1};
var E_io
  = Exception {code = EC_io, msg = "generic IO", exit_status = 1};
var E_signal
  = Exception {code = EC_signal, exit_status = 1};
var E_io_flags
  = Exception {code = EC_io_flags, msg = "invalid IO flags", exit_status = 1};
var E_inval
  = Exception {code = EC_inval, msg = "invalid argument", exit_status = 1};
var E_exit
  = Exception {code = EC_exit, msg = "exit", exit_status = 0};
var E_assert
  = Exception {code = EC_assert, msg = "assertion failure", exit_status = 1};
var E_overflow
  = Exception {code = EC_overflow, msg = "overflow", exit_status = 1};

/* Registration of user-defined exceptions */

type _ExceptionCodeGenerator = () int<32>;
var exception_code = lambda _ExceptionCodeGenerator:
  {
    var n = 255; /* First available code for user-defined exceptions */

    return lambda int<32>: { return n++; };
  }();

/* Default exception handler.

   Note that the code in this function should NOT raise any exception,
   or be ready to underflow the exception handlers stack and face some
   ugly shit.  You have been warned!  */

fun _pkl_exception_handler = (Exception exception) int<32>:
  {
   if (exception.code != EC_exit && exception.code != EC_signal)
     {
       print ("unhandled "
              + (exception.msg == "" ? "unknown" : exception.msg)
              + " exception\n");
     }

   return exception.exit_status;
  }

/* Assertion function.

   The compiler transforms assert statement to invocation of this
   function.  COND is first argument of assert statement, and MSG is
   the optional second argument.  LINEINFO contains the source location
   of the assert statement formatted like "<FILENAME>:<LINE>:<COLUMN>".
   */

fun _pkl_assert = (uint<64> cond, string msg, string lineinfo) void:
  {
    if (cond)
      return;

    raise Exception {
      code = EC_assert,
      msg = "assertion failed at " + lineinfo + (msg'length ? ": " + msg : ""),
      exit_status = 1,
    };
  }

/* Exit a Poke program with the given exit status code.  This is equivalent
   to raise an E_exit exception, but provides a more conventional
   syntax.  */

fun exit = (int<32> exit_code = 0) void:
  {
    raise Exception { code = EC_exit, exit_status = exit_code };
  }

/* Find the greatest common divisor of two unsigned 64-bit integrals A
   and B using the Euclidean algorithm.  */

fun _pkl_gcd = (uint<64> a, uint<64> b) uint<64>:
  {
   if (b == 0)
     return a;
   else
     return _pkl_gcd (b, a % b);
  }

/* Return the prefix to use when printing integral magnitudes of the
   given numerical base.  This may return an empty prefix.  */

fun _pkl_base_prefix = (int<32> base) string:
 {
   if (base == 2)
      return "0b";
   if (base == 8)
      return "0o";
   if (base == 16)
      return "0x";

   return "";
 }

/* Return a string with the name corresponding to the given unit in
   bits.  This may be an empty string for an unknown unit.

   This should go away once we have a run-time mechanism to store and
   access unit types.  */

var _pkl_unit_bit =    1UL;
var _pkl_unit_nibble = 4UL;
var _pkl_unit_byte =   8UL;

var _pkl_unit_kilobit = _pkl_unit_bit * 1000;
var _pkl_unit_kilobyte = _pkl_unit_byte * 1000;
var _pkl_unit_megabit = _pkl_unit_kilobit * 1000;
var _pkl_unit_megabyte = _pkl_unit_kilobyte * 1000;
var _pkl_unit_gigabit = _pkl_unit_megabit * 1000;
var _pkl_unit_gigabyte = _pkl_unit_megabyte * 1000;

var _pkl_unit_kibibit = _pkl_unit_bit * 1024;
var _pkl_unit_kibibyte = _pkl_unit_byte * 1024;
var _pkl_unit_mebibit = _pkl_unit_kibibit * 1024;
var _pkl_unit_mebibyte = _pkl_unit_kibibyte * 1024;
var _pkl_unit_gigibit = _pkl_unit_mebibit * 1024;
var _pkl_unit_gigibyte = _pkl_unit_mebibyte * 1024;

fun _pkl_unit_name = (uint<64> bits) string:
 {
    if (bits == _pkl_unit_bit)
       return "b";
    if (bits == _pkl_unit_nibble)
       return "N";
    if (bits == _pkl_unit_byte)
       return "B";
    if (bits == _pkl_unit_kilobit)
       return "Kb";
    if (bits == _pkl_unit_kilobyte)
       return "KB";
    if (bits == _pkl_unit_megabit)
       return "Mb";
    if (bits == _pkl_unit_megabyte)
       return "MB";
    if (bits == _pkl_unit_gigabit)
       return "Gb";
    if (bits == _pkl_unit_gigabyte)
       return "GB";
    if (bits == _pkl_unit_kibibit)
       return "Kib";
    if (bits == _pkl_unit_kibibyte)
       return "KiB";
    if (bits == _pkl_unit_mebibit)
       return "Mib";
    if (bits == _pkl_unit_mebibyte)
       return "MiB";
    if (bits == _pkl_unit_gigibit)
       return "Gib";
    if (bits == _pkl_unit_gigibyte)
       return "GiB";

    return "";
  }

/**** Set the default load path ****/

var load_path = "";

/* First, add the system-wide locations.  */

try load_path = getenv ("POKEDATADIR");
catch if E_inval { load_path = "%DATADIR%"; }

try load_path = getenv ("POKEPICKLESDIR") + ":" + load_path;
catch if E_inval { load_path = "%DATADIR%/pickles" + ":" + load_path; }

/* Add the directories prescribed by the XDG Base Directory
   Specification as described in
   https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html */

try load_path = getenv ("XDG_DATA_HOME") + ":" + load_path;
catch if E_inval {
  try load_path = getenv ("HOME") + "/.local/share/poke:" + load_path;
  catch if E_inval {}
}

try load_path = getenv ("XDG_DATA_DIRS") + ":" + load_path;
catch if E_inval { }

/* Add the directories in POKE_LOAD_PATH, if defined.  */
try load_path = getenv ("POKE_LOAD_PATH") + ":" + load_path;
catch if E_inval { }

/* Add the current working directory.  */
load_path = ".:" + load_path;
